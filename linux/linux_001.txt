
修改时间
date -s 07/31/2019
date -s 15:59:30
date -s "07/31/2019 15:59:30"
查看时间
date  

查看命令的几种方式: 
[命令] --help 		适用于一般命令,非内置命令
man [命令]			适用于一般命令,非内置命令
help [命令]			适用于内置命令
info [命令]			一般使用较少

注意:
如:
man cd (或cd --help)是无法查询出cd这种内置命令的使用说明
需要使用help命令来查看内置命令(help 本身也是一个内置命令)
help cd
help help



1.创建一个目录
windows下目录为 C:\data (\ 反斜线, / 斜线,除号)
linux下目录为 /data (/ 为linux下所有目录的顶点)

英文 make directorys 缩写后就是 mkdir (使用 -p 可以逐级创建文件夹)

mkdir /data
或者(cd  change directory  改变目录路径; pwd  print work directory  打印工作目录(显示当前所在路径))
cd /;mkdir data
(使用分好可以在一行命令之内分割两个命令
切换到多级父目录上
cd ../../../

cd ..	上一级目录
cd -	上一次目录(因为系统存在 $OLDPWD 环境变量目录 可以 echo $OLDPWD )
所以 cd -  等效于  cd $OLDPWD

逐级创建文件夹( mkdir -vp /data/test/a/b/c/d  加上 v 可以查看文件创建过程)
mkdir -p /data/test/a/b/c/d
可以通过 echo {1..5} 发现是 1 2 3 4 5,所有下面会创建 dir1  dir2  dir3  dir4  dir5 这5个目录 
mkdir -pv /data/test/dir{1..5}
在1下面创建3和4;并在2下面也创建3和4( echo {1..2}{3..4} 会发现跟分配率相近,13 14 23 24
mkdir -pv /data/test/{1..2}/{3..4}


安装tree命令组件,以便查看多级目录( -y 表示默认直接y确认所有提示) yum update 可用于更新补丁
(list contents of directories in a tree-like format)
yum install tree -y
可以将一下组件直接安装了,后续都会使用到(这里包含了tree,如果执行力上面的命令要剔除tree)
yum install irzsz telnet tree nmap nc -y
使用tree命令查看目录结构(如果出现乱码,修改字符集为英文字符集: LANG=en   注意:linux严格区分大小写)
(echo $LANG 可以查看)
(或 vi /etc/profile   alias tree='tree --charset ASCII'   source /etc/profile)
tree /data
tree -a /date  可以查看隐藏文件( -a ,一般以 . 开头的都是隐藏文件)
tree -d /date  只显示文件夹( -d )
tree -L 1 /date  只显示L后面数字的层级( 1 表示只显示一层, 2 表示显示两层目录 )
tree -dLfi 1 /date   ( -f 是显示绝对路径  -i 是去掉前面的 -- 为方便这些目录作为某些命令的输入)

使用 ls 查看目录文件,可选项可不加,后面接需要查看的目录文件(如果ls后面连目录文件也没有,那么就显示当前目录文件信息)
( alias ll  可发现ll是ls的别名  alias ll='ls -l --color=auto' )
ls -ld /data
ls -a  可以查看隐藏文件夹
或者(中间的为可选项,可以通过 ls --help 来查看命令的可选项,顺序不影响执行)
ls -dl /data
( -l (long)长格式  -d (directorys)只查看本目录的信息,不查看其中的子目录)
ls -lh  		( -l 展示详细信息,接近ll; -h (human readable)是将bytes转换,4096则为4k;1048576则为1M,方便查看大小)
ls -ld /bin		( -d表示只查看目录的属性,而不是显示目录里面的内容的属性(没有-d是会显示目录内的内容的, -d 不能单独使用,后面需要接文件名 )
ls -rt			( -t 表示按修改时间排序(最新文件在最上方), -r 表示反向排序(最新的就在下方,文件多时方便就近查看))

最常用:( -i 查看文件索引节点号,是一个系统中唯一的)
ls -lhi
ls -lahi


相对路径和绝对路径
windows绝对路径:
C:\AppData   (从头(盘符)开始的路径.)

linux绝对路径: cat /etc/sysconfig/network-scripts/ifcfg-eth0   (从根 / 开始的路径)
相对路径: 不是从 / 根开始,不从头开始的路径,就是当前所在目录开始(即相对于当前目录)



2.创建一个文件(touch (触摸)文件如果存在,不会覆盖,但是会更新时间戳)
touch /data/naruto.txt
ll /data
vi naruto.txt
按 i 进入编辑模式(按 a 或者 o 也行),并开始编辑
按 Esc (Escape 逃脱,退出)
输入 :wq 保存退出
cat /data/naruto.txt

vi  相当于windows的记事本
vim  复杂编辑器(功能复杂,高亮,自动缩进 用于写shell脚本)


使用 echo 创建一个文件
rm -f /data/naruto.txt
echo 'learning echo test' >naruto.txt
( 最好使用单引号 )
(> 重定向到文件,如果文件不存在会创建, 如果文件存在会覆盖里面的内容; 
如果不想被覆盖,需要使用 >> 追加到尾部,而不是直接重定向 >)
echo 'test >> ' >>naruto.txt
(如果需要追加多行,需要在记事本中先编辑好,再复制过去,以免回车导致命令直接执行)
echo '111
222
333' >>naruto.txt


使用 cat(主要功能是查看文件内容) 创建一个文件
rm -f /data/naruto.txt
cat >naruto.txt
开始编辑: 输入下列信息
learning cat > test
按 crrl + c 或者 ctrl + d 结束编辑
cat /data/naruto.txt

使用 cat 追加多行内容(EOF 可以使用任意成对的字母或数字替换)
cat >>/data/naruto.txt<<EOF
I am studying linux
EOF



xargs  从标准输入创建和执行命令行(通过 man xargs 可查看描述)
常用options :  -n 数字  (用于输入数据的分组)
cd /data;echo 1 2 3 4 5 6 7 8 >/data/naruto.txt
cat naruto.txt
四个为一组
xargs -n 4 <naruto.txt
三个为一组
xargs -n 3 <naruto.txt


cat >>luffy.txt<<EOF
1 2 3 4 5 6
7 8 9
10 11
EOF

显示为一行
xargs < luffy.txt
分组
xargs -n 3 < luffy.txt
通过 -i (或者 -I 引用; -i 默认 {}, -I 可以使用 {} [] ())
意思就是将xargs前面的内容通过 -i 赋值给指定的 {} 
find /home/test/ -type f -name "luffy.txt"|xargs -I mv [] /tmp/
find /home/test/ -type f -name "luffy.txt"|xargs -i mv {} /tmp/


3.特殊符号
>  或者  1>  输出重定向:把前面输出的东西输入到后边的文件中,会清除文件原有内容.
>>  或者  1>>  追加输出重定向:把前面输出的东西追加到后边的文件尾部,不会清除文件原有内容.
0<  或者  <  输入重定向:输入重定向用于改变命令的输入,后面指定输入内容,前面跟文件名
0<<  或者 <<  追加输入重定向:后面跟字符串,用来表示"输入结束",也可以用ctrl+d来结束输入
	例子:
	cat >>/data/naruto.txt<<EOF
	I am studying linux
	EOF
	
	tr "studying" "learning" <naruto.txt
	(tr 替换文件中的内容)
	
2>  错误重定向:把错误信息输入到后面的文件中,会删除文件原有内容.
2>>  错误追加重定向:把错误信息追加到后面的文件中,不会删除文件原有内容

说明:(标准输入 standard input; 标准输出 standard output)
1.箭头的指向就是数据的流向
2.数字说明:(0一般配合输入; 1,2配合输出)
	a.标准输入(stdin):  代码为0.使用0< 或者 0<<  数据流向是从右向左
	b.标准正常输出(stdout):  代码为1,使用1> 或者 1>>  数据(正确的数据)流向是从左向右
	c.标准错误输出(stderr):  代码为2,使用2> 或者 2>>  数据(错误的数据)流向是从左向右
	d.标准正常输出和标准错误输出一样:  2>&1 相当于跟屁虫,1放到哪,2就放到哪
	

echo my standard output without error 1>naruto_1.txt 2>naruto_2.txt
(echo 也可以不使用单引号, 正确的信息输出到naruto_1.txt;如果执行命令报错了,报错的信息输出到naruto_2.txt
echoerror my standard output without error 1>naruto_1.txt 2>naruto_2.txt
(因为不存在 echoerror 命令,所以日志会输出到 naruto_2.txt)
但是一般会输出到同一个文件中
echo my standard output without error 1>naruto.txt 2>naruto.txt
更加简化的写法是(常用 把错误输出重定向到标准输出流):
echoerror my standard output without error >naruto.txt 2>&1
最精简的写法: &>代表错误输出 和 标准输出 一起输出到
echoerror my standard output without error &>naruto.txt



4. cp  copy  拷贝文件或目录
拷贝文件:
mkdir /test
\cp /data/naruto.txt /test			( \ 表示在发生覆盖的时候不提示信息,直接覆盖)

拷贝目录:(将 /data 整个目录拷贝过去, -a  更加通用)
(-a 相当于 -pdr  -p 是保留文件权限等属性, -d 在复制时,不取消引用,保留链接文件属性, -r 递归复制目录)
cp -a /data /test 
特殊
mkdir -p /home/test/dir3
(bash在执行命令的时候会将dir{3,4}展开为 dir3 dir4  {} bash  A{B,C}  ==>  AB AC)
cp -a /home/test/dir{3,4}		
所有命令相当于
cp -a /home/test/dir3 /home/test/dir4
所以备份文件的时候,可以简写为
touch /home/test/dir3/luffy.txt
cp -a /home/test/dir3/luffy.txt{,.ori}			(注意 逗号 不能省略,用于分割文件本身和添加了.ori的文件) 



5. mv 移动 move(移动时后面的斜线最好不要带,就不是 /data/ 而是 /data
mv /data /root

alias mv		显示为 alias mv='mv -i'在复制的时候发现要覆盖的话就会提示( 所以也可以使用 \ 来处理)

mkdir -p /home/test/dir{1..4}
mv dir1 dir2 dir3 dir4		
可以看到是将dir1 - dir3 移动至 dir4
tree /home/test/dir4

find /data -type f -name "naruto.txt" |xargs -i mv {} /tmp/  多一个 -i 参数为了xargs可以执行mv命令
mv 'find /data -type f -name "naruto.txt"' /tmp/




6.删除(慎用!!! 删前备份!!!) rm  ( remove  -f(force) 强制, -r(recursive) 递归,用于删除目录)
rm /root/data/naruto.txt
强制删除:(删除文件不能使用 -r )
rm -f /root/data/naruto.txt
删除目录:
rm -rf /root/data

正确删除文件的姿势
1.使用mv命令移动到/tmp (回收站)替代删除动作
建议使用 find 来删除
mkdir /data
echo naruto test >/data/naruto.txt
查看目录下 类型是 文件类型的信息
( f (file)代表文件; d (directory)目录, c (character)字符串类型, b (blog)磁盘类型, s (socket)通讯文件 l (link)符号链接)
find /data -type f
echo test find >/data/test.txt
(此时可查看到两个文件 echo 和 touch 创建的都是文件)
find /data -type f -name "naruto.txt"
查看目录下,类型是:文件类型, 名为naruto的文件

查询条件较多,不容易误删:
( -exec 到 \; 是要执行的命令, {}代表find查找到的内容, rm代表这里执行删除命令(也可以换成其他可对{}执行的命令,比如 ls)
find /data -type f -name "naruto.txt"			筛选类型为文件,名为naruto的文件
find /data -type f ! -name "naruto.txt"			! 表示取反
find /data -type f -name "naruto.txt" -exec rm {} \;		花括号{}表示前面查找到的内容, \用于转义, 为了能在linux各个系统都可以通用(不同系统的;略微有差异)
第二种find删除方式:(推荐)
find /data -type f -name "*.txt" |xargs rm -f 
(xargs 可以删除多个文件)
touch /data/ 1.txt 2.txt 3.txt			(必须要绝对路径)
也可以使用下列命令创建连续名称的文件
touch /data {1..3}.txt					( {a..c}.txt 也可以 )

find 还有一个options:  -mtime  (还有 ctime atime  文件数据修改 modify  访问 access  文件状态修改 change)
+7  代表7天以前
7  代表第七天
-7  代表最近七天
find /log -type f -name "*.log" -mtime +15 |xargs rm -f  删15天以前的,/log目录下的, .log结尾的文件
find /log -type d -name "*naruto" -mtime +30 |xargs rm -rf  删30天前的,/log目录下, naruto结尾的目录(删目录需要使用rf)

注意 xargs 不能直接接mv命令,因为mv是把 XX 移动到 XXX路径,所以需要下列方式
(` ` 反引号是将执行后的内容包裹起来)
touch /data {1..10}.txt
mkdir /test;mv `find -type f -name "*.txt"` /test
ls /test



7.特殊字符 
| 管道 
( |之前的命令可以认为就是一个大管道(管道里的流体对应内容),这个管道之后可以接一个 或 多个管道来处理管道内部的流体)

.. 代表上一级目录
.  代表当前目录
/  根目录,所有目录的顶点
!  +数字 调用历史记录(查询历史命令 history | grep mkdir  或者 查询最近一条 !mkdir )
   还有取反的意思(对应find,shell编程)
   find / -type d -name bin 		查询 / 目录下,名为bin的目录
   find / -type d ! -name bin 		查询 / 目录下,名不为bin的目录
   find / -type d -name bin -o -name etc		查询 / 目录下,名为bin的目录 或 名为etc的目录( -o 或者(or))
   find / -type d -name bin -a -name etc		查询 / 目录下,名为bin的目录 或 名为etc的目录( -a 或者(and)) 
~  当前用户的home(家)目录(cd - 到当前目录的上一次所在的目录)
\  转义字符
&& 并且的意思(相当于and)



8.grep 过滤需要的内容(就像使用筛子来筛选东西)
linux三剑客:grep,awk,sed,他们都有过滤字符串的功能,grep最擅长,awk处理列擅长,sed擅长删除,修改,替换,添加
cat >>/data/test.txt<<EOF
luffy
naruto
nier_naruto
nier_luffy
naruto_luffy
EOF

cat test.txt |grep naruto

注意: -v 表示不包含后面接的内容(排除内容)
	  -a 在二进制文件中,以文本文件的方式搜索数据
	  -c 计算找到'搜索字符串'的次数
	  -o 仅显示出匹配regex的内容
	  -i 忽略大小写的不同
	  -n 匹配的内容在其行首显示行号
	  -E 扩展的grep,即egrep(可以转义特殊字符等功能)
推荐写法:
grep -v naruto test.txt
另一种写法(不建议使用,没必要先把文件查看一遍,然后再管道去查询;显得不专业!!!):
cat test.txt |grep -v naruto




9.head (头.头部)从头开始查看文件
查看前两行(也可以不用n; 如果 n 和 -数字都没加,默认看前10行)
head -n 2 /data/test.txt
习惯写法,节省字符
head -2 /data/test.txt



10.tail (尾,尾巴)输出文件的后n行
tail -n 



11. 在拷贝文件的时候如果有重复文件,但是不想出现提示覆盖
touch /data/test.txt
touch /tmp/test.txt
这时候会提示是否覆盖(因为 cp mv rm这些命令都是比较危险的,可能会使得之前文件被破坏,需要提示操作人员)
所以这些命令默认都添加了options: -i来让用户确认操作 cp -i 
cp /data/test.txt /tmp
如果需要不提示
方法一: 添加\在cp前面(使用 \ 来屏蔽linux针对这种危险命令的别名功能,即:cp 实际上是 cp -i 的别名)
\cp /data/test.txt /tmp
方法二: 从命令根路径直接执行,这样就不会被系统默认为别名
/bin/cp /data/test.txt /tmp
方法三: 暴力删除别名法(不建议使用,危险 且 服务器重启也会重新生效)
unalias cp


可以通过 alias(别名功能) 命令来查看系统现有别名,发现命令添加了那些options
注意:alias只在当前命令行有效,如果是通过管道那么别名携带的参数不会生效,需要手动添加
(-i 让用户确认)
[root@naruto bin]# alias
alias cp='cp -i'
alias l.='ls -d .* --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias mv='mv -i'
alias rm='rm -i'

查看别名
alias
取消别名
unalias cp

这种设置别名的方式一般系统重启之后就没有了
设置别名(echo 是必须的),那么以后输入xx就会显示this command does not allow to use.
alias xx='echo this command does not allow to use.'
输入net就会显示ifcfg-eth0的内容
alias net='cat /etc/sysconfig/network-scripts/ifcfg-eth0'

定义别名永久生效:
全局生效(修改 profile 即可,将 alias cp='cp -i' 等加入即可)
cat /etc/profile
当前用户生效
cat ~/.bashrc

使用 source 使得配置文件生效
source /etc/profile



12. seq (sequence)序列
seq 100 是 seq 1 1 100 的简写; 第一个数字代表起始数字;第二个数字代表 步长 ;第三个数字代表 上限大小
seq 100 >/data/test.txt

如果需要查看 20 - 30 行的数据
方法一:
head -30 test.txt |tail -11

sed (stream editor)流编辑器,实现对文件的增删改查
这个命令更有效率( -n 表示取消默认输出规则,如果不添加,那么sed会把所有数据都输出出来(默认规则),
如果需要按照我们筛选条件输出,那么就需要使用 -n )
 p 代表打印
 $ 代表结尾
 
方法二:
会打印出第20-30位的数据
sed -n '20,30'p test.txt
会把最后一个元素打印出来
sed -n '$'p test.txt


方法三:
awk 过滤,输出内容,也是一门语言
awk '19<NR && NR<31' test.txt

方法四:( $指定行数 )
awk '{if(NR<31 && NR > 19) printf $0"\n"}' test.txt

方法五:(先找到并显示第20行,再同时显示后面的十行,共十一行)
grep 20 -A 10 test.txt
第30行以及之前的10行
grep 30 -B 10 test.txt

方法六:(先找到并显示第25行,再同时显示该行的前后各5行)
grep 25 -A 5 test.txt

grep参数
-v 后面接要排除的内容
-A 除了显示匹配中的一行,还要显示匹配中行之后的n行(after 之后)
-B 除了显示匹配中的一行,还要显示匹配中行之前的n行(before 之前)
-C 除了显示匹配中的一行,还要显示匹配中行前后的n行(context 上下文)

13.sed 详解
linux三剑客老二,流编辑器,实现对文件的增删改查
参数:
	-n 取消默认输出
	-i 修改文件内容
	-e 允许多项编辑器
功能命令
	p 打印,g与s联合使用时,表示对当前行全局匹配替换
	s常说的查找并替换,用一个字符串替换成另一个
	g代表全局,表示整个文件
	
echo 'luffy_naruto luffy_nier naruto_nier' > comic.txt
替换功能( sed 's#需要被替换的内容#用什么替换#g' 需要被替换的文件  理论上分割符#可以被 / @ 等特殊字符替换)
sed 's#naruto_nier#female_emperor#g' comic.txt
cat comic.txt
这样只是输出显示改了,要想文件也被修改,需要添加 -i 参数
sed -i "s#naruto_nier#female_emperor#g" comic.txt
cat comic.txt

问题:将 /home/test 下面的.sh结尾的文件中,nier 全替换成 female_emperor
mkdir -p /home/test/tmp
echo 'naruto nier' > /home/test/sed_test1.sh;
echo 'luffy nier' > /home/test/tmp/sed_test2.sh;
echo 'naruto luffy' > /home/test/sed_test3.sh;

查看目录下所有文件类型
find /home/test/* -type f
查看目录下所有文件类型 并 以 .sh 结尾的文件
find /home/test/* -type f -name "*.sh" 
查看目录下所有文件类型 并 以 .sh 结尾的文件 并 查看文件中的内容
find /home/test/* -type f -name "*.sh"|xargs cat

先不要使用 -i 参数,以便直接打印出修改后的内容,确认无误后,再添加 -i 参数修改
find /home/test/* -type f -name "*.sh" | xargs sed "s#nier#female_emperor#g"
find /home/test/* -type f -name "*.sh" | xargs sed -i "s#nier#female_emperor#g"
使用Tab键上面的 ` 来引用命令
sed -i "s#female_emperor#nier#g" `find /home/test/* -type f -name "*.sh"`
(上面这条命令相当于 sed -i "s#female_emperor#nier#g" /home/test/sed_test1.sh /home/test/tmp/sed_test2.sh /home/test/sed_test3.sh )
find /home/test/* -type f -name "*.sh"|xargs cat


14.pwd 
pwd  获取当前/工作目录 (print current/working directory)
options
-L 	 (默认)打印系统默认环境变量$PWD (可以用echo $PWD 查看)
-P	 打印物理绝对路径,规避了系统软连接,直接找根

15.stat 查看文件修改记录
mkdir /home/test/tmp
touch /home/test/tmp/{a..c}.txt
echo "naruto" > /home/test/tmp/a.txt
stat /home/test/tmp/a.txt
touch -a /home/test/tmp/a.txt 				(改变文件访问时间)
touch -m /home/test/tmp/a.txt 				(改变文件修改时间)
stat /home/test/tmp/a.txt

16.添加普通用户,root用户权限过大
useradd naruto		添加用户
tail -1 /etc/passwd
passwd naruto		设置密码(也可以 echo "123456"|passwd --stdin naruto (--stdin表示接受管道前面的字符串作为密码))
切换用户,一定要加 - 
su - naruto
pwd  查看家(home)文件夹所在位置
whoami  查看我是谁
(可以发现 普通用户是$  超级管理员root是#)

17. hostname 显示和设置主机名
hostname  默认显示主机名
hostname 名字		(设置主机名,临时生效)

18. 查看修改命令显示窗口
set |grep PS1
修改窗口显示,临时生效(永久生效要改配置文件 /etc/profile 添加 PS1='[\u@\h \W\t]\$ ')
PS1='[\u@\h \W\t]\$ '

19. linux调优,关闭不健全的安全设置(这是针对root的安全措施,限制了root,其实违背了root的原本最大权限的初衷,
使得部分命令,修改配置变得更加复杂,安全还是其他方式来处理)
先备份
cp /etc/selinux/config /etc/selinux/config.ori
预览替换后的样子
sed "s#SELINUX=enforcing#SELINUX=disabled#g" /etc/selinux/config
替换
sed -i "s#SELINUX=enforcing#SELINUX=disabled#g" /etc/selinux/config
查看配置
grep "SELINUX=" /etc/selinux/config
查看安全策略状态
getenforce
生效(先临时改为不生效,待下次重启就会读取配置文件,因为linux不是必要情况下是不会轻易重启的)
setenforce 0

或

vi /etc/selinux/config
修改安全策略为关闭(disabled)
SELINUX=disabled

20.查看linux的运行级别
cat /etc/inittab
显示的是
id:3:initdefault:
那就是直接进入命令行模式(多用户连接)

查看当前运行级别
runlevel

使用命令也可以切换
init 0		关机( shutdown -h now  或 halt 关机)
init 1		单用户模式,一般用于出问题情况下的调试
init 6		重启( reboot 或 shutdown -r now )

21.查看字符集
cat /etc/sysconfig/i18n
可以修改为下列形式,以便tree可以正常显示中文(同时可以查看,新建中文名称的文件,但是不建议创建中文命名的文件)

echo 'LANG="zh_CN.UTF-8"
SYSFONT="latarcyrheb-sun16"' > /etc/sysconfig/i18n

echo 'LANG="en_US.UTF-8"
SYSFONT="latarcyrheb-sun16"' > /etc/sysconfig/i18n

source /etc/sysconfig/i18n
echo $LANG 		查看字符集

22.设置登录超时时间
export TMOUT=60				超时时间为60秒,会退出
echo 'export TMOUT=600' >> /etc/profile		永久生效

23.history  查看历史
history
history |grep cd
清除历史记录
history -c	
清除指定第几条的历史
history -d 数字( 这个数字可以通过history查看 )		
设置历史记录最大条数
export HISTSIZE=20		设置history命令的最大条数

cat ~/.bash_history  ( 也可以查看 history 记录 )
export HISTFILESIZE=20		设置bash_history的最大条数

echo 'export HISTSIZE=20' >> /etc/profile		永久生效
echo 'export HISTFILESIZE=20' >> /etc/profile		永久生效
source /etc/profile

24.清除版本,网络信息的显示(因为主要的漏洞都是和版本相关的)
cat /etc/issue
cat /etc/issue.net

清除 
 > /etc/issue
 > /etc/issue.net


25.连接克隆(占用空间小)的虚拟机,网络不可用
1.需删除,设置
vi /etc/sysconfig/network-scripts/ifcfg-eth0 
删除( 按两次d ) "HWADDR"  "UUID"
设置 IP 网关 

2.清空
 > /etc/udev/rules.d/70-persistent-net.rules

3.重启系统
reboot

 
26.查看linux系统目录结构
tree -L 1 / 		查看根下面的一级目录
ls /dev/sda*		查看硬盘分盘信息

linux目录的特点:(不要轻易删除文件,另需要先备份,再修改; 改为 .ori)
1, / 是所有目录的顶点
2, 目录结构像一颗倒挂的树
3, 目录和磁盘的分区是没有关系的
4, / 下不同的目录可能会对应不同的分区或磁盘

linux里设备不挂载是看不到入口的,雷士没有窗户的监狱
如果希望被访问,就必须给这个设备一个入口
这个入口就叫做挂载点,挂载点的表现实质是一个目录

mount		挂载命令
 
光驱也是一种设备	/dev/cdrom    (默认光驱对应的目录)

查看硬盘使用 
df -h

查看硬盘分区
fdisk -l  

发现均不能找到VMWare中的光驱,这时候就需要使用mount
mount /dev/cdrom /mnt			将光驱默认目录 /dev/cdrom 挂载到根目录下的 /mnt
这时候看到mount: block device /dev/sr0 is write-protected, mounting read-only说明光驱只是可读的
再使用 df -h 即可看到光驱设备 以及 挂载目录
cd /mnt			即可查看光驱里面的内容了

linux的 / 和 swap 在开机会自动使用UUID挂载


一般可执行的文件应放在/usr/bin下;
存储数据文件放在/usr/share下;
配置文件放在/etc下面

历史缘由(开始硬盘的体积大,容量小,只有1.5M一块)
所以:
/ 		第一块硬盘(1.5M) 	放系统程序
/usr	第二块硬盘(1.5M)	放用户程序(usr 可以理解为user 或 unix software resource)	
							/usr/local 相当于c:/program files,一般是软件编译默认路径,yum rpm路径一般不再是这里了
而两块盘的目录结构是一样的
/home	第三块硬盘(1.5M)	放用户数据



27.linux文件标准FHS
/bin		Essential user command binaries(常用二进制命令) 	比如存放 ls cp mkdir rm cut等命令
(which ls 就可以查看 ls 命令所在的目录)

/boot 		Static files of the boot loader(内核及引导程序)		内核及引导程序必须安装在 / 或者 /boot下面
/dev		device files(设备文件的目录,比如声卡,磁盘,光驱)		cat /dev/null >/home/test/naruto.txt 清空文件的方法,黑洞
/etc		二进制软件安装包(yum install)的配置文件默认路径
			fstab(static information about filesystems(optional)		开机自动挂载配置
			hosts(static information about filesystems(optional)		主机名配置
			issue(pre-login message and identification file(optional)	开机后展示信息配置
			motd(post-login message of the day file(optional)			登录后显示信息配置(可用于欢迎文案显示)
			network(static information about network names)(optional)	网络信息配置
			profile(systemwide initialization file for sh shell logins(optional) 全局环境变量配置
			resolv.conf(resolver configuration file(optional)			DNS配置文件
			init.d(启动命令)											防火墙运行命令等(/etc/init.d/iptables)
/home		普通用户的家目录(大臣的家)
/root		超级管理员的家目录(皇宫)
/var		变化的目录,一般是日志文件,cache的目录
/usr		用户程序及数据,帮助文件,二进制命令等的目录
/bin 		普通用户命令的目录
/sin和/usr/sbin		超级用户命令的目录
/tmp 		临时文件目录
/proc		显示内核及进程信息的虚拟文件系统




ssh 22 端口
ip 访问的物理地址
port 一般一个服务对应一个端口
protocol 协议,客户端和服务端通信需要使用同样的协议


ps -ef|grep ssh
就可以查看到ssh相关的进程

netstat -lntup|grep ssh 
可以查看到ssh占用的端口
tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      1555/sshd
tcp        0      0 :::22                       :::*                        LISTEN      1555/sshd

LISTEN 表示监听
0 0.0.0.0:22 中 0.0.0.0 表示监听本机所有网卡的ip :22表示监听22端口
tcp 表示ssh从大方向,属于tcp协议


排查故障:
1.两个机器之间是否畅通,看物理网络(网线,网卡,IP是不是正确)
ifconfig ( ip addr ) 				windows(ipconfig)
ping ip -t    来检测机器是否畅通
(如果ping不通,那么可能是 网卡 IP 网线 防火墙 不通)

2.查看服务(端口)是否畅通
windows在控制面板中,"程序和功能","打开或关闭Windows功能",勾选"Telnet Client"
linux 没有telnet命令的话,需要yum(或rpm)安装

telnet ip port
例:  telnet 192.168.25.161 22 (telnet也可以远程连接 23端口 但是因为不是加密的,基本不用)
显示 
SSH-2.0-OpenSSH_5.3 或者空白都是连接成功
(如果telnet不通,可能是 
服务器端防火墙阻挡 ( 查看转态 /etc/init.d/iptables status  停止 /etc/init.d/iptables stop )
( 永久关闭防火墙 chkconfig iptables off )
没有开启这个端口的服务(服务器端没有监听你连接的端口, 检查端口: netstat -lntup|grep 端口号)

其他方法
针对ip
tracert -d 192.168.25.161
针对端口(仅linux   yum install -y nmap)
nmap 192.168.25.161 -p 22



快捷键
tab
在只知道命令开头的时候,比如find
输入 f ,然后按两次 tab 键,就会显示所有f开头的命令
输入in,再按一次 tab 键(一次会帮助补全命令)

ctrl+c
终止当前任务或者当前程序

ctrl+d 
退出当前用户,相当于exit,logout

ctrl+l 
清屏,相当于clear

ctrl+shift+c ( ctrl + insert )
复制

ctrl+shift+v ( shift + insert ) 
粘贴

ctrl+a 
跳到当行命令的开头(相当于home)

ctrl+e 
跳到当行命令的结尾(相当于end)

ctrl+u 
清除光标所在位置前面的文本

ctrl+k
清除光标所在位置后面的文本

ctrl+w 
清除当前行(一般用ctrl+c就够了)

ctrl+r 
搜索, 在(reverse-i-search)`':后面输入要搜索的关键字,会显示匹配中的最近一条记录

ctrl+s 
挂起(相当于锁屏,一般不用)

ctrl+q
解除挂起


查看系统硬件是64位还是32位( x86_64 即为64位)
uname -m 
或
uname -a

查看操作系统版本
cat /etc/redhat-release

查看内核
uname -r 

硬盘使用前 ---- 需要分区 ---- 格式化(创建文件系统) ---- 存放数据
房子使用前 ---- 需要隔断 ---- 装修,买家具 		   ---- 入住

分区:
一块硬盘:
主分区,扩展分区,逻辑分区
主分区+扩展分区的数量<=4,其中一个主分区可以用一个扩展分区替代,扩展分区最多只能有一个
扩展分区不能直接使用,还需要在上面创建逻辑分区,逻辑分区可以有多个

主分区+扩展分区 编号只能是1-4,逻辑分区只能从5开始

常规分区:数据不是特别重要的业务(集群的某个节点)
/boot 引导分区  200m 主分区
swap  交换分区  内存的1.5倍,内存大于8G,一般给8-16G
/	  linux所有目录的顶点  剩余所有空间

数据重要分区(数据库,存储服务器)
/boot 引导分区  200m 主分区
swap  交换分区  内存的1.5倍,内存大于8G,一般给8-16G
/	  linux所有目录的顶点  100-200G
/date 存放数据的目录  剩余所有空间

特大网站,门户(产品特别多,根据需求分区)
/boot 引导分区  200m 主分区
swap  交换分区  内存的1.5倍,内存大于8G,一般给8-16G
/	  linux所有目录的顶点  100-200G
剩余空间不分配  等哪个部门,哪个服务系统有需要了,再根据需求对剩余空间分区

注意:不要根据 /usr /home /var 这种文件目录进行分区

系统的第一块IDE接口的硬盘称为 /dev/hda
系统的第二块IDE接口的硬盘称为 /dev/hdb
系统的第一块SCSI接口的硬盘称为 /dev/sda
系统的第二块SCSI接口的硬盘称为 /dev/sdb

系统的第一块IDE接口的硬盘第一个分区  /dev/hda1
系统的第一块IDE接口的硬盘第五个分区  /dev/hda5
系统的第二块SCSI接口的硬盘第一个分区 /dev/sdb1
系统的第二块SCSI接口的硬盘第五个分区 /dev/sdb5

文件系统(格式化的本质就是创建文件系统)
组织管理磁盘文件的的机制
centOS6 建议 ext4 功能更全(包含日志记录等功能)
centOS7 建议 xfs




文件传输(用于 secureCRT)
yum install lrzsz -y
上传
切换到需要传入的目录中
cd /home/test
pwd
rz
就会弹出选择框(不要勾选ASCII方式上传)
rz -y  (覆盖已存在的文件)

下载
sz -y 文件名

secureCRT多窗口操作
点击"查看"选择"交互窗口"
然后在下方的白色框,右键选择"发送交互到所有会话"

























