服务高可用
可用性 : 1 - 阶段停机时间/阶段总时长
两个9 : 99% 一年有88小时不可用
一个9 : 90% 一年880小时不可用
注意 : 服务器高峰期的1小时停机 和 低峰期1小时停机,影响是不同的

服务冗余(需要服务无状态化,以便快速扩容,及弹性缩容,session可以使用共享形式)
负载均衡(幂等性设计,用户因网络等问题,重复操作,得到的最终结果是一致的)
超时机制(异步化设计,非核心流量,非关键业务可以使用异步化操作)
服务限流降级熔断(数据复制/缓存/Sharding)


如何无缝停止线上服务:
1.网关需要有热切换开关控制: 在预停机点进行开关切换,将新到的请求全部拒绝掉
2.判断服务停机时间: 根据前端请求的超时时间判断历史未完成的请求是否处理完成,同时可以结合日志是否打印来判断

注: 如果网关不具备热切换功能,需要寄希望于防火墙能够做到请求只出不进


性能优化目标: 缩短响应延时, 提高并发数(增加吞吐量),让系统处于合理状态

空间换时间: 在cpu时间更加昂贵的时候,使用缓存复用来降低时间开销
时间换空间: 在网络传输时,使用gzip压缩算法降低空间,但是会增加解压缩导致的时间增长

IM好友列表: 每次登陆就拉取好友列表信息,对后台压力过大,应采取版本号控制方式,在数据变更的时候,才会去拉取新的信息

代码逻辑避免生成过多对象或无效对象:
避免输出Log的时候log级别判断(会生成log对象,其实直接使用日志打印即可),避免new无效对象

ArrayList,HashMap初始容量设置是否合理
扩容是有代价的


对数据对象是否合理重用,不如通过rpc查到的数据能复用则必须复用

根据数据访问的特性选择合适的数据结构,比如读多写少,考虑CopyOnWriteArrayList

拼接字符串不是使用String而是使用StringBuilder进行append

是否正确初始化数据

Mysql查询索引
在查询数据量大于表数据量的30%时,Mysql会选择直接全表扫描
所以根据业务需求,应该尽量缩小查询范围

Mysql单表索引尽量不要超过6个?


用更高效的算法替换现有算法,而不改变其接口
增量式算法:复用之前的算法结果,如月统计复用日统计结果进行计算
并发和锁优化,基于cas的LockFree比mutex性能好
当系统时间是瓶颈,采取空间换时间逻辑算法,缓存计算结果以便复用
当系统空间是瓶颈,采取时间换空间算法策略,Http的gzip压缩算法,App的请求分类接口,使用版本号判断哪些数据需要更新
循环遍历是否合理高效:不要再循环里调用RPC接口,查询分布式缓存,执行sql等,应调批量接口组装好数据,再循环处理
异步执行次要流程


秒杀系统
1.HTML,JS,CSS等静态文件存放CDN,缓存到用户端(APP,浏览器)
2.非实时动态数据,(秒杀期间如商品标题,商品描述,图片URL列表,店铺信息,秒杀活动信息等),这些数据缓存在用户访问链路中靠近用户的位置,粗过滤一部分流量,比如用户是否有秒杀资格,秒杀是否已结束等,这些数据实时性要求不高
3.实时数据如用户营销数据(如要求用户使用红包,而该用户无对应的红包;折扣权限)商品库存等再过滤一批用户
4.经过多层过滤最终落到数据库的流量已经很少,最终在数据库层面使用事务保证扣减库存准确性




