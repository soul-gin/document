

集群角色分配:
		NN		JN	ZKFC	ZK	DN	NM	RM
node01	 *		*	  *
node02	 *	 	*	  *	    *	 *   *
node03			*			*	 *	 *	*
node04						*	 *	 *	*


初始化:
-> 在 (node02-04) 启动zookeeper
1) 先启动JN(node01-03)   hadoop-daemon.sh start journalnode 
2) 选择一个NN 做格式化(node01)：hdfs namenode -format   <只有第一次搭建做，以后不用做>
3) 启动这个格式化的NN (node01),以备另外一台同步  hadoop-daemon.sh start namenode 
4) 在另外一台机器中(node02)： hdfs namenode -bootstrapStandby
5) 格式化zk(一台执行node01)：   hdfs zkfc -formatZK     <只有第一次搭建做，以后不用做>
	-> ZKFC 和 namenode要一一对应,以便监控nn健康状态
6) start-dfs.sh	  ( stop-dfs.sh )
(jps查看,缺少的节点需手动起: 
或 stop-dfs.sh后再start-dfs.sh
hadoop-daemon.sh start namenode
(一般datanode启动失败,是重新格式化了namenode导致nn和dn的VERSION文件不一致,
找到配置再hdfs-site.xml中配置的dfs.datanode.data.dir的dn路径,清空里面内容即可,生产不可测试)
hadoop-daemon.sh start datanode   
hadoop-daemon.sh start zkfc
hadoop-daemon.sh start journalnode
)
7)通过node01配置来启动node02-04的NM,在node01执行: start-yarn.sh   ( stop-yarn.sh )
	-> nodemanager 要和 datanode 一一对应,不然没法管理
8)启动RM,在node03~04执行: yarn-daemon.sh start resourcemanager
	-> RM(资源管理)类似hdfs的namenode需要HA模式,所以两个节点



for i in `seq 100000`;do  echo "hello hadoop $i"  >>  data.txt  ;done
hdfs dfs -mkdir -p   /data/wc/input
hdfs dfs -D dfs.blocksize=1048576  -put data.txt  /data/wc/input
		
		
停止hdfs,存在hdfs环境
stop-dfs.sh
启动
start-dfs.sh

启动 journalnode
hadoop-daemon.sh start journalnode

hdfs namenode -format

启动zkfc
hadoop-daemon.sh start zkfc

启动namenode
hadoop-daemon.sh start namenode


mape 以一条记录为单位做映射
(单条记录加工和处理)
reduce 以一组为单位做计算(那么需要先分组,数据分组依赖于key:value结构,根据key进行分组)
(多条记录加工处理)








schematool -dbType mysql -initSchema



hbase启动报错
Terminal initialization failed; falling back to unsupported
java.lang.IncompatibleClassChangeError: Found class jline.Terminal, but interface was expected
将hive下的新版本jline的JAR包拷贝到hadoop下：cp /hive/lib/jline-2.12.jar /hadoop/share/hadoop/yarn/lib/









查看服务器最大链接数
less /proc/sys/fs/epoll/max_user_watches

hdfs dfs -ls -h /poc2/G_TR_CHNL_ALL_FLOW/20200331

ALTER TABLE   表名  DROP IF EXISTS PARTITION (datestr='20200331');


#!/bin/bash
for i in {01..31}
do
     echo "i is $i"
    mv 202005$i/202005$i.txt tmp/	
done



#!/bin/bash

yum -y install vixie-cron
yum -y install crontabs
yum  install expect

systemctl start crond     //启动服务
systemctl stop crond      //关闭服务
systemctl restart crond    //重启服务
systemctl reboot crond    //重新载入配置
systemctl status crond     //查看crontab服务状态

在CentOS系统中加入开机自动启动: 
chkconfig --level 345 crond on

crontab -e

*/1 * * * * /root/append.sh    #每分钟执行一次

*   *　 *　 *　 *　　command
分　时　日　月　周　 命令

crontab[-u <用户名称>][配置文件] 或 crontab [-u <用户名称>][-elr]
解释：cron 是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使 用计时器的功能。其配置文件格式如下：Minute Hour Day Month DayOFWeek Command

参数：
-e　编辑该用户的计时器设置。
-l　列出该用户的计时器设置。
-r　删除该用户的计时器设置。
-u<用户名称> 　指定要设定计时器的用户名称。






cron 的主配置文件是 /etc/crontab，它包括下面几行：

SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/

# run-parts
01 * * * * root run-parts /etc/cron.hourly
02 4 * * * root run-parts /etc/cron.daily
22 4 * * 0 root run-parts /etc/cron.weekly
42 4 1 * * root run-parts /etc/cron.monthly

前四行是用来配置 cron 任务运行环境的变量。
SHELL 变量的值告诉系统要使用哪个 shell 环境（在这个例子里是 bash shell）；
PATH 变量定义用来执行命令的路径。
cron 任务的输出被邮寄给 MAILTO 变量定义的用户名。
如果 MAILTO 变量被定义为空白字符串（MAILTO=""），电子邮件就不会被寄出。
HOME 变量可以用来设置在执行命令或脚本时使用的主目录。





























